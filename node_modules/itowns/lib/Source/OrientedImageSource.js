"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _Source2 = _interopRequireDefault(require("./Source"));

/**
 * @classdesc OrientedImageSource is a specific source used to load oriented images.
 * @extends Source
 */
var OrientedImageSource =
/*#__PURE__*/
function (_Source) {
  (0, _inherits2["default"])(OrientedImageSource, _Source);

  /**
   * @constructor
   * @param { Object } source - Configuration object
   * @param { string } source.url - Url for all the textures.
   * This Url must contains {sensorId} and {cameraId}, and these pattern will be replaced to build the Url,
   * to find the good texture for each camera for each panoramic.
   */
  function OrientedImageSource(source) {
    var _this;

    (0, _classCallCheck2["default"])(this, OrientedImageSource);
    source.format = source.format || 'json';
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(OrientedImageSource).call(this, source));
    _this.isOrientedImageSource = true;
    return _this;
  }
  /**
   * Build the url of the texture, but not from extent.
   *
   * @param      {Object}  imageInfo - Information about the texture
   * @param      {string}  imageInfo.camera - Id of the camera
   * @param      {string}  imageInfo.pano - Id of the panoramic
   * @return     {string}  Url of the image
   */


  (0, _createClass2["default"])(OrientedImageSource, [{
    key: "urlFromExtent",
    value: function urlFromExtent(imageInfo) {
      return this.imageUrl(imageInfo.cameraId, imageInfo.panoId);
    }
    /**
     * Build the url of the image, for a given panoramic id, and a given camera id.
     *
     * @param      {string}  cameraId  Id of the camera
     * @param      {string}  panoId   Id of the panoramic
     * @return     {string}  Url of the image
     */

  }, {
    key: "imageUrl",
    value: function imageUrl(cameraId, panoId) {
      return this.url.replace('{cameraId}', cameraId).replace('{panoId}', panoId);
    }
  }]);
  return OrientedImageSource;
}(_Source2["default"]);

var _default = OrientedImageSource;
exports["default"] = _default;