"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.COLOR_LAYERS_ORDER_CHANGED = void 0;

var _Layer = require("../Layer/Layer");

function updateLayersOrdering(geometryLayer, imageryLayers) {
  var sequence = _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);

  var cO = function (object) {
    if (object.material && object.material.setSequence) {
      object.material.setSequence(sequence);
    }
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = geometryLayer.level0Nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var node = _step.value;
      node.traverse(cO);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
}

var COLOR_LAYERS_ORDER_CHANGED = 'layers-order-changed';
/**
 * Utilitary to organize {@link ColorLayer} in a {@link View}.
 *
 * @module ColorLayersOrdering
 */

exports.COLOR_LAYERS_ORDER_CHANGED = COLOR_LAYERS_ORDER_CHANGED;
var _default = {
  /**
   * Moves up in the layer list. This function has no effect if the layer is
   * moved to its current index.
   *
   * @param {View} view - The view in which the layer is moved up.
   * @param {string} layerId - The ID of the layer to move.
   *
   * @example
   * itowns.ColorLayersOrdering.moveLayerUp(viewer, 'idLayerToUp');
   */
  moveLayerUp: function moveLayerUp(view, layerId) {
    var imageryLayers = view.getLayers(function (l) {
      return l.isColorLayer;
    });
    var layer = view.getLayerById(layerId);

    if (layer) {
      var previousSequence = _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);

      _Layer.ImageryLayers.moveLayerUp(layer, imageryLayers);

      updateLayersOrdering(view.tileLayer, imageryLayers);
      view.dispatchEvent({
        type: COLOR_LAYERS_ORDER_CHANGED,
        previous: {
          sequence: previousSequence
        },
        "new": {
          sequence: _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers)
        }
      });
      view.notifyChange(view.tileLayer);
    } else {
      throw new Error("".concat(layerId, " isn't color layer"));
    }
  },

  /**
   * Moves down in the layer list. This function has no effect if the layer is
   * moved to its current index.
   *
   * @param {View} view - The view in which the layer is moved down.
   * @param {string} layerId - The ID of the layer to move.
   *
   * @example
   * itowns.ColorLayersOrdering.moveLayerDown(viewer, 'idLayerToDown');
   */
  moveLayerDown: function moveLayerDown(view, layerId) {
    var imageryLayers = view.getLayers(function (l) {
      return l.isColorLayer;
    });
    var layer = view.getLayerById(layerId);

    if (layer) {
      var previousSequence = _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);

      _Layer.ImageryLayers.moveLayerDown(layer, imageryLayers);

      updateLayersOrdering(view.tileLayer, imageryLayers);
      view.dispatchEvent({
        type: COLOR_LAYERS_ORDER_CHANGED,
        previous: {
          sequence: previousSequence
        },
        "new": {
          sequence: _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers)
        }
      });
      view.notifyChange(view.tileLayer);
    } else {
      throw new Error("".concat(layerId, " isn't color layer"));
    }
  },

  /**
   * Moves a specific layer to a specific index in the layer list. This
   * function has no effect if the layer is moved to its current index.
   *
   * @param {View} view - The view in which the layer is moved.
   * @param {string} layerId - The ID of the layer to move.
   * @param {number} index - The index to move the layer to.
   *
   * @example
   * itowns.ColorLayersOrdering.moveLayerToIndex(viewer, 'idLayerToChangeIndex', 2);
   */
  moveLayerToIndex: function moveLayerToIndex(view, layerId, index) {
    var imageryLayers = view.getLayers(function (l) {
      return l.isColorLayer;
    });
    var layer = view.getLayerById(layerId);

    if (layer) {
      var previousSequence = _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers);

      _Layer.ImageryLayers.moveLayerToIndex(layer, index, imageryLayers);

      updateLayersOrdering(view.tileLayer, imageryLayers);
      view.dispatchEvent({
        type: COLOR_LAYERS_ORDER_CHANGED,
        previous: {
          sequence: previousSequence
        },
        "new": {
          sequence: _Layer.ImageryLayers.getColorLayersIdOrderedBySequence(imageryLayers)
        }
      });
      view.notifyChange(view.tileLayer);
    } else {
      throw new Error("".concat(layerId, " isn't color layer"));
    }
  }
};
exports["default"] = _default;