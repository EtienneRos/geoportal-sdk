"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.EMPTY_TEXTURE_ZOOM = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var THREE = _interopRequireWildcard(require("three"));

var _LayeredMaterial = require("./LayeredMaterial");

var _XbilParser = require("../Parser/XbilParser");

var _Crs = _interopRequireDefault(require("../Core/Geographic/Crs"));

var EMPTY_TEXTURE_ZOOM = -1;
exports.EMPTY_TEXTURE_ZOOM = EMPTY_TEXTURE_ZOOM;
var pitch = new THREE.Vector4();

function defineLayerProperty(layer, property, initValue, defaultValue) {
  var _value = initValue !== undefined ? initValue : defaultValue;

  Object.defineProperty(layer, property, {
    get: function get() {
      return _value;
    },
    set: function set(value) {
      if (_value !== value) {
        _value = value;
      }
    }
  });
}

var MaterialLayer =
/*#__PURE__*/
function () {
  function MaterialLayer(material, layer) {
    var _this = this;

    (0, _classCallCheck2["default"])(this, MaterialLayer);
    this.id = layer.id;
    this.textureOffset = 0; // will be updated in updateUniforms()

    this.crs = layer.parent.tileMatrixSets.indexOf(_Crs["default"].formatToTms(layer.projection));

    if (this.crs == -1) {
      console.error('Unknown crs:', layer.projection);
    } // Define color properties


    var _valueOpacity = layer.opacity !== undefined ? layer.opacity : true;

    Object.defineProperty(this, 'opacity', {
      get: function get() {
        return _valueOpacity;
      },
      set: function set(value) {
        if (_valueOpacity !== value) {
          if (value === 0 || _valueOpacity === 0) {
            _this.material.layersNeedUpdate = true;
          }

          _valueOpacity = value;
        }
      }
    });

    var _valueVisibility = layer.visible !== undefined ? layer.visible : true;

    Object.defineProperty(this, 'visible', {
      get: function get() {
        return _valueVisibility;
      },
      set: function set(value) {
        if (_valueVisibility !== value) {
          _this.material.layersNeedUpdate = true;
          _valueVisibility = value;
        }
      }
    });
    defineLayerProperty(this, 'effect', layer.fx, 0);
    var defaultEle = {
      bias: 0,
      scale: 1,
      mode: _LayeredMaterial.ELEVATION_MODES.DATA,
      zmin: 0,
      zmax: Infinity
    };
    var scaleFactor = 1.0; // Define elevation properties

    if (layer.useRgbaTextureElevation) {
      defaultEle.mode = _LayeredMaterial.ELEVATION_MODES.RGBA;
      defaultEle.zmax = 5000;
      throw new Error('Restore this feature');
    } else if (layer.useColorTextureElevation) {
      scaleFactor = layer.colorTextureElevationMaxZ - layer.colorTextureElevationMinZ;
      defaultEle.mode = _LayeredMaterial.ELEVATION_MODES.COLOR;
      defaultEle.bias = layer.colorTextureElevationMinZ;
    }

    defineLayerProperty(this, 'bias', layer.bias, defaultEle.bias);
    defineLayerProperty(this, 'scale', layer.scale * scaleFactor, defaultEle.scale * scaleFactor);
    defineLayerProperty(this, 'mode', layer.mode, defaultEle.mode);
    defineLayerProperty(this, 'zmin', layer.zmin, defaultEle.zmin);
    defineLayerProperty(this, 'zmax', layer.zmax, defaultEle.zmax);
    this.textures = [];
    this.offsetScales = [];
    this.level = EMPTY_TEXTURE_ZOOM;
    this.material = material;
  }

  (0, _createClass2["default"])(MaterialLayer, [{
    key: "initFromParent",
    value: function initFromParent(parent, extents) {
      if (parent && parent.level > this.level) {
        var index = 0;
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = extents[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var c = _step.value;
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = parent.textures[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var texture = _step2.value;

                if (c.isInside(texture.coords)) {
                  this.setTexture(index++, texture, c.offsetToParent(texture.coords));
                  break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
                  _iterator2["return"]();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"] != null) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }
  }, {
    key: "replaceNoDataValueFromParent",
    value: function replaceNoDataValueFromParent(parent, nodatavalue) {
      var dataElevation = this.textures[0].image.data;
      var parentTexture = parent && parent.textures[0];

      if (dataElevation && parentTexture && !(0, _XbilParser.checkNodeElevationTextureValidity)(dataElevation, nodatavalue)) {
        var coords = this.textures[0].coords;
        coords.offsetToParent(parentTexture.coords, pitch);
        (0, _XbilParser.insertSignificantValuesFromParent)(dataElevation, parentTexture.image.data, nodatavalue, pitch);
      }
    }
  }, {
    key: "dispose",
    value: function dispose() {
      // TODO: WARNING  verify if textures to dispose aren't attached with ancestor
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = this.textures[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var texture = _step3.value;

          if (texture.isTexture) {
            texture.dispose();
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      this.level = EMPTY_TEXTURE_ZOOM;
      this.textures = [];
      this.offsetScales = [];
      this.material.layersNeedUpdate = true;
    }
  }, {
    key: "setTexture",
    value: function setTexture(index, texture, offsetScale) {
      this.level = texture && index == 0 ? texture.coords.zoom : this.level;
      this.textures[index] = texture || null;
      this.offsetScales[index] = offsetScale;
      this.material.layersNeedUpdate = true;
    }
  }, {
    key: "setTextures",
    value: function setTextures(textures, pitchs) {
      this.dispose(false);

      for (var i = 0, il = textures.length; i < il; ++i) {
        this.setTexture(i, textures[i], pitchs[i]);
      }
    }
  }]);
  return MaterialLayer;
}();

var _default = MaterialLayer;
exports["default"] = _default;