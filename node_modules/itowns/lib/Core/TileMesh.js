"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var THREE = _interopRequireWildcard(require("three"));

var _Crs = _interopRequireDefault(require("./Geographic/Crs"));

/**
 * A TileMesh is a THREE.Mesh with a geometricError and an OBB
 * The objectId property of the material is the with the id of the TileMesh
 * @constructor
 * @param {TileGeometry} geometry - the tile geometry
 * @param {THREE.Material} material - a THREE.Material compatible with THREE.Mesh
 * @param {Layer} layer - the layer the tile is added to
 * @param {Extent} extent - the tile extent
 * @param {?number} level - the tile level (default = 0)
 */
var TileMesh =
/*#__PURE__*/
function (_THREE$Mesh) {
  (0, _inherits2["default"])(TileMesh, _THREE$Mesh);

  function TileMesh(geometry, material, layer, extent) {
    var _this;

    var level = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    (0, _classCallCheck2["default"])(this, TileMesh);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(TileMesh).call(this, geometry, material));

    if (!extent) {
      throw new Error('extent is mandatory to build a TileMesh');
    }

    _this.layer = layer;
    _this.extent = extent;
    _this.extent.zoom = level;
    _this.level = level;
    _this.material.objectId = _this.id;
    _this.obb = _this.geometry.OBB.clone();
    _this.boundingSphere = new THREE.Sphere();

    _this.obb.box3D.getBoundingSphere(_this.boundingSphere);

    _this._tms = new Map();
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = layer.tileMatrixSets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var tms = _step.value;

        _this._tms.set(tms, _this.extent.tiledCovering(tms));
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator["return"] != null) {
          _iterator["return"]();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    _this.frustumCulled = false;
    _this.matrixAutoUpdate = false;
    _this.rotationAutoUpdate = false;
    _this.layerUpdateState = {};
    _this.isTileMesh = true;
    return _this;
  }
  /**
   * If specified, update the min and max elevation of the OBB
   * and updates accordingly the bounding sphere and the geometric error
   *
   * @param {?number} min
   * @param {?number} max
   * @param {?number} scale
   */


  (0, _createClass2["default"])(TileMesh, [{
    key: "setBBoxZ",
    value: function setBBoxZ(min, max, scale) {
      if (min == undefined && max == undefined) {
        return;
      } // FIXME: Why the floors ? This is not conservative : the obb may be too short by almost 1m !


      if (Math.floor(min) !== Math.floor(this.obb.z.min) || Math.floor(max) !== Math.floor(this.obb.z.max)) {
        this.obb.updateZ(min, max, scale);

        if (this.horizonCullingPointElevationScaled) {
          this.horizonCullingPointElevationScaled.setLength(this.obb.z.delta + this.horizonCullingPoint.length());
        }

        this.obb.box3D.getBoundingSphere(this.boundingSphere);
      }
    }
  }, {
    key: "getExtentsByProjection",
    value: function getExtentsByProjection(projection) {
      return this._tms.get(_Crs["default"].formatToTms(projection));
    }
    /**
     * Search for a common ancestor between this tile and another one. It goes
     * through parents on each side until one is found.
     *
     * @param {TileMesh} tile
     *
     * @return {TileMesh} the resulting common ancestor
     */

  }, {
    key: "findCommonAncestor",
    value: function findCommonAncestor(tile) {
      if (!tile) {
        return undefined;
      }

      if (tile.level == this.level) {
        if (tile.id == this.id) {
          return tile;
        } else if (tile.level != 0) {
          return this.parent.findCommonAncestor(tile.parent);
        } else {
          return undefined;
        }
      } else if (tile.level < this.level) {
        return this.parent.findCommonAncestor(tile);
      } else {
        return this.findCommonAncestor(tile.parent);
      }
    }
  }, {
    key: "onBeforeRender",
    value: function onBeforeRender() {
      if (this.material.layersNeedUpdate) {
        this.material.updateLayersUniforms();
      }
    }
  }]);
  return TileMesh;
}(THREE.Mesh);

var _default = TileMesh;
exports["default"] = _default;